# -*- coding: utf-8 -*-
import sys
import random
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QTabWidget, QVBoxLayout,
    QLabel, QPushButton, QLineEdit, QHBoxLayout, QMessageBox,
    QGroupBox, QComboBox, QFrame, QSpacerItem, QSizePolicy, QTextEdit
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont


class BusinessSimulator:
    def __init__(self):
        self.scenarios = [
            {
                'name': "üöÄ IT-–°—Ç–∞—Ä—Ç–∞–ø",
                'stages': [
                    {
                        'description': "–£ –≤–∞—Å 500 000 ‚ÇΩ –∏ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ 5 —á–µ–ª–æ–≤–µ–∫. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:",
                        'options': [
                            "1. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ä–∏—Å–∫: —Å—Ä–µ–¥–Ω–∏–π)",
                            "2. –°–æ–∑–¥–∞–Ω–∏–µ SaaS-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (—Ä–∏—Å–∫: –≤—ã—Å–æ–∫–∏–π)",
                            "3. IT-–∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ (—Ä–∏—Å–∫: –Ω–∏–∑–∫–∏–π)"
                        ],
                        'results': [
                            {"budget": -200000, "users": 15000, "team": 3},
                            {"budget": -300000, "users": 25000, "team": 5},
                            {"budget": -100000, "users": 5000, "team": 2}
                        ]
                    },
                    {
                        'description': "–ö—Ä–∏–∑–∏—Å –Ω–∞ —Ä—ã–Ω–∫–µ! –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å —Å –∫–æ–º–∞–Ω–¥–æ–π?",
                        'options': [
                            "1. –£–≤–æ–ª–∏—Ç—å —á–∞—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (-3 —á–µ–ª.)",
                            "2. –°–æ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã (+100k ‚ÇΩ)",
                            "3. –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–µ (-150k ‚ÇΩ)"
                        ],
                        'results': [
                            {"team": -3, "morale": -40},
                            {"budget": 100000, "morale": -20},
                            {"budget": -150000, "users": -10000}
                        ]
                    },
                    {
                        'description': "–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
                        'options': [
                            "1. –ü—Ä–æ–¥–∞—Ç—å –∑–∞ 2 –º–ª–Ω ‚ÇΩ",
                            "2. –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
                            "3. –ü—Ä–æ—Å–∏—Ç—å 3 –º–ª–Ω ‚ÇΩ"
                        ],
                        'results': [
                            {"budget": 2000000, "reputation": -20},
                            {"users": 5000, "reputation": 10},
                            {"legal": -30, "reputation": -10}
                        ]
                    }
                ]
            },
            {
                'name': "üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
                'stages': [
                    {
                        'description': "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–∫—É–ø–∫–∏ —Å—ã—Ä—å—è:",
                        'options': [
                            "1. –î–µ—à—ë–≤–æ–µ —Å—ã—Ä—å—ë (+50k ‚ÇΩ, -30% –∫–∞—á–µ—Å—Ç–≤–∞)",
                            "2. –ü—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ —Å—ã—Ä—å—ë (-100k ‚ÇΩ, +40% –∫–∞—á–µ—Å—Ç–≤–∞)",
                            "3. –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä (-50k ‚ÇΩ, +15% –∫–∞—á–µ—Å—Ç–≤–∞)"
                        ],
                        'results': [
                            {"quality": -30, "budget": 50000},
                            {"quality": 40, "budget": -100000},
                            {"quality": 15, "budget": -50000}
                        ]
                    },
                    {
                        'description': "–û–±–Ω–∞—Ä—É–∂–µ–Ω –±—Ä–∞–∫ –≤ –ø–∞—Ä—Ç–∏–∏! –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:",
                        'options': [
                            "1. –û—Ç–æ–∑–≤–∞—Ç—å –ø–∞—Ä—Ç–∏—é (-150k ‚ÇΩ, +20% —Ä–µ–ø—É—Ç–∞—Ü–∏–∏)",
                            "2. –ü—Ä–æ–¥–∞—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π (+80k ‚ÇΩ, -10% —Ä–µ–ø—É—Ç–∞—Ü–∏–∏)",
                            "3. –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å (-30% —Ä–µ–ø—É—Ç–∞—Ü–∏–∏, —Å—É–¥–µ–±–Ω—ã–µ –∏—Å–∫–∏)"
                        ],
                        'results': [
                            {"reputation": 20, "budget": -150000},
                            {"reputation": -10, "budget": 80000},
                            {"reputation": -30, "legal": -50}
                        ]
                    }
                ]
            },
            {
                'name': "üè™ –†–æ–∑–Ω–∏—á–Ω–∞—è —Å–µ—Ç—å",
                'stages': [
                    {
                        'description': "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:",
                        'options': [
                            "1. –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω (-500k ‚ÇΩ)",
                            "2. –§—Ä–∞–Ω—á–∞–π–∑–∏–Ω–≥ (+200k ‚ÇΩ)",
                            "3. –û–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂–∏ (-300k ‚ÇΩ)"
                        ],
                        'results': [
                            {"budget": -500000, "users": 10000},
                            {"budget": 200000, "reputation": -15},
                            {"budget": -300000, "users": 20000}
                        ]
                    },
                    {
                        'description': "–ö—Ä–∏–∑–∏—Å –ø–æ—Å—Ç–∞–≤–æ–∫! –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:",
                        'options': [
                            "1. –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (-100k ‚ÇΩ)",
                            "2. –£–≤–µ–ª–∏—á–∏—Ç—å —Ü–µ–Ω—ã (+15% –ø—Ä–∏–±—ã–ª–∏)",
                            "3. –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (-50% –≤—ã—Ä—É—á–∫–∏)"
                        ],
                        'results': [
                            {"budget": -100000, "reputation": 10},
                            {"reputation": -20, "users": -5000},
                            {"budget": -300000, "users": -10000}
                        ]
                    }
                ]
            }
        ]

        self.reset()

    def reset(self):
        self.current_scenario = random.choice(self.scenarios)
        self.current_stage = 0
        self.stats = {
            'budget': 1000000,
            'reputation': 75,
            'team': 10,
            'users': 0,
            'morale': 100,
            'quality': 50,
            'legal': 100
        }


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ –±–∏–∑–Ω–µ—Å-—Å–∏–º—É–ª—è—Ç–æ—Ä—ã")
        self.setGeometry(100, 100, 1200, 800)
        self.setup_styles()
        self.init_questions()
        self.business_sim = BusinessSimulator()
        self.init_ui()

    def setup_styles(self):
        self.setStyleSheet("""
            QMainWindow { 
                background-color: #f0f4f7; 
            }
            QGroupBox {
                font-size: 14px; 
                font-weight: bold; 
                color: #2c3e50;
                border: 2px solid #3498db; 
                border-radius: 5px;
                margin-top: 10px; 
                padding-top: 15px;
            }
            QLabel, QTextEdit, QLineEdit, QComboBox {
                font-size: 14px;
            }
            QLabel { 
                color: #2c3e50; 
            }
            QPushButton {
                background-color: #3498db; 
                color: white;
                border: none; 
                padding: 8px 16px;
                border-radius: 4px; 
                font-size: 14px;
            }
            QPushButton:hover { 
                background-color: #2980b9; 
            }
            QLineEdit {
                padding: 6px; 
                border: 1px solid #bdc3c7;
                border-radius: 4px; 
            }
            QTextEdit { 
                background-color: white; 
            }
        """)

    def init_questions(self):
        self.questions = {
            "–•–∏–º–∏—è": [
                {
                    "question": "1) –ú–æ–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞ –≤–æ–¥—ã (H‚ÇÇO) –≤ –≥/–º–æ–ª—å?",
                    "answer_type": "numeric",
                    "answer_correct": 18.015,
                    "tolerance": 0.1
                },
                {
                    "question": "2) –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤–µ—â–µ—Å—Ç–≤–∞ –∏–∑ —Ç–≤—ë—Ä–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –≥–∞–∑–æ–æ–±—Ä–∞–∑–Ω–æ–µ?",
                    "answer_type": "text",
                    "correct_keywords": ["—Å—É–±–ª–∏–º–∞—Ü"]
                },
                {
                    "question": "3) –ü—Ä–æ–¥—É–∫—Ç—ã —Ä–µ–∞–∫—Ü–∏–∏ –∫–∏—Å–ª–æ—Ç—ã –∏ –æ—Å–Ω–æ–≤–∞–Ω–∏—è?",
                    "answer_type": "text",
                    "correct_keywords": ["—Å–æ–ª—å", "–≤–æ–¥–∞"]
                },
                {
                    "question": "4) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ç–æ–Ω–æ–≤ –≤ –∞—Ç–æ–º–µ —É–≥–ª–µ—Ä–æ–¥–∞?",
                    "answer_type": "numeric",
                    "answer_correct": 6,
                    "tolerance": 0
                },
                {
                    "question": "5) –§–æ—Ä–º—É–ª–∞ —Å–µ—Ä–Ω–æ–π –∫–∏—Å–ª–æ—Ç—ã?",
                    "answer_type": "text",
                    "correct_keywords": ["h2so4"]
                },
                {
                    "question": "6) –ß–∏—Å–ª–æ –ê–≤–æ–≥–∞–¥—Ä–æ (–æ–∫—Ä—É–≥–ª—ë–Ω–Ω–æ)?",
                    "answer_type": "numeric",
                    "answer_correct": 6.022e23,
                    "tolerance": 1e21
                },
                {
                    "question": "7) –ö–∞–∫–æ–π –≥–∞–∑ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–∞–∫—Ü–∏–∏ –º–µ—Ç–∞–ª–ª–æ–≤ —Å –∫–∏—Å–ª–æ—Ç–æ–π?",
                    "answer_type": "text",
                    "correct_keywords": ["–≤–æ–¥–æ—Ä–æ–¥", "h2"]
                }
            ],
            "–§–∏–∑–∏–∫–∞": [
                {
                    "question": "1) –¢–æ–∫ (I) –ø—Ä–∏ U=12–í –∏ R=6–û–º?",
                    "answer_type": "numeric",
                    "answer_correct": 2.0,
                    "tolerance": 0.001
                },
                {
                    "question": "2) –î–≤–∏–∂–µ–Ω–∏–µ —Ç–µ–ª–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏–ª?",
                    "answer_type": "text",
                    "correct_keywords": ["—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω", "–∏–Ω–µ—Ä—Ü"]
                },
                {
                    "question": "3) –ü–µ—Ä–≤—ã–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞ –Ω–∞–∑—ã–≤–∞—é—Ç...",
                    "answer_type": "text",
                    "correct_keywords": ["–∏–Ω–µ—Ä—Ü–∏–∏"]
                },
                {
                    "question": "4) –û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–≤–µ—Ç–∞?",
                    "answer_type": "text",
                    "correct_keywords": ["c", "—Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞"]
                },
                {
                    "question": "5) –§–æ—Ä–º—É–ª–∞ –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏?",
                    "answer_type": "text",
                    "correct_keywords": ["mv¬≤/2", "1/2mv¬≤"]
                },
                {
                    "question": "6) –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è (–º/—Å¬≤)?",
                    "answer_type": "numeric",
                    "answer_correct": 9.81,
                    "tolerance": 0.1
                },
                {
                    "question": "7) –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∏–ª—ã?",
                    "answer_type": "text",
                    "correct_keywords": ["–Ω—å—é—Ç–æ–Ω", "–Ω"]
                }
            ],
            "–ë–∏–æ–ª–æ–≥–∏—è": [
                {
                    "question": "1) –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–≤–µ—Ç–∞ –≤ —ç–Ω–µ—Ä–≥–∏—é?",
                    "answer_type": "text",
                    "correct_keywords": ["—Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑"]
                },
                {
                    "question": "2) –ù–æ—Å–∏—Ç–µ–ª—å –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?",
                    "answer_type": "text",
                    "correct_keywords": ["–¥–Ω–∫", "dna"]
                },
                {
                    "question": "3) –ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–æ–≤—ã—Ö –∫–ª–µ—Ç–æ–∫?",
                    "answer_type": "text",
                    "correct_keywords": ["–º–µ–π–æ–∑", "meiosis"]
                },
                {
                    "question": "4) –§—É–Ω–∫—Ü–∏—è –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–π?",
                    "answer_type": "text",
                    "correct_keywords": ["—ç–Ω–µ—Ä–≥–µ—Ç–∏—á", "–∞—Ç—Ñ"]
                },
                {
                    "question": "5) –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∂–∏–∑–Ω–∏?",
                    "answer_type": "text",
                    "correct_keywords": ["–∫–ª–µ—Ç–∫–∞"]
                },
                {
                    "question": "6) –ü—Ä–æ—Ü–µ—Å—Å –¥–µ–ª–µ–Ω–∏—è —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–µ—Ç–æ–∫?",
                    "answer_type": "text",
                    "correct_keywords": ["–º–∏—Ç–æ–∑"]
                },
                {
                    "question": "7) –û—Ä–≥–∞–Ω –≥–∞–∑–æ–æ–±–º–µ–Ω–∞ —É —Ä–∞—Å—Ç–µ–Ω–∏–π?",
                    "answer_type": "text",
                    "correct_keywords": ["—É—Å—Ç—å–∏—Ü–∞"]
                }
            ],
            "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": [
                {
                    "question": "1) –ó–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ œÄ (–æ–∫—Ä—É–≥–ª—ë–Ω–Ω–æ)?",
                    "answer_type": "numeric",
                    "answer_correct": 3.1416,
                    "tolerance": 0.01
                },
                {
                    "question": "2) –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –æ—Ç x¬≤?",
                    "answer_type": "text",
                    "correct_keywords": ["2x"]
                },
                {
                    "question": "3) –†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x + 5 = 15",
                    "answer_type": "numeric",
                    "answer_correct": 5,
                    "tolerance": 0
                },
                {
                    "question": "4) –ü–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ (—Ñ–æ—Ä–º—É–ª–∞)?",
                    "answer_type": "text",
                    "correct_keywords": ["œÄr¬≤"]
                },
                {
                    "question": "5) –°—É–º–º–∞ —É–≥–ª–æ–≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞?",
                    "answer_type": "numeric",
                    "answer_correct": 180,
                    "tolerance": 0
                },
                {
                    "question": "6) –ß—Ç–æ —Ç–∞–∫–æ–µ –≥–∏–ø–æ—Ç–µ–Ω—É–∑–∞?",
                    "answer_type": "text",
                    "correct_keywords": ["—Å—Ç–æ—Ä–æ–Ω–∞", "–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π", "–ø—Ä–æ—Ç–∏–≤"]
                },
                {
                    "question": "7) –ó–Ω–∞—á–µ–Ω–∏–µ ‚àö144?",
                    "answer_type": "numeric",
                    "answer_correct": 12,
                    "tolerance": 0
                }
            ],
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": [
                {
                    "question": "1) –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü?",
                    "answer_type": "text",
                    "correct_keywords": ["html"]
                },
                {
                    "question": "2) –ß–∏—Å–ª–æ –±–∏—Ç–æ–≤ –≤ –±–∞–π—Ç–µ?",
                    "answer_type": "numeric",
                    "answer_correct": 8,
                    "tolerance": 0
                },
                {
                    "question": "3) –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –û–û–ü?",
                    "answer_type": "text",
                    "correct_keywords": ["–æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ"]
                },
                {
                    "question": "4) –õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è '–ò'?",
                    "answer_type": "text",
                    "correct_keywords": ["and", "&&"]
                },
                {
                    "question": "5) –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –≤ —à–∏—Ä–∏–Ω—É?",
                    "answer_type": "text",
                    "correct_keywords": ["bfs"]
                },
                {
                    "question": "6) –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¶–ü–£?",
                    "answer_type": "text",
                    "correct_keywords": ["–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–æ-–ª–æ–≥–∏—á–µ—Å–∫–æ–µ", "–∞–ª—É"]
                },
                {
                    "question": "7) –Ø–∑—ã–∫ —Å —É—Ç–∏–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π?",
                    "answer_type": "text",
                    "correct_keywords": ["python"]
                }
            ]
        }

    def init_ui(self):
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        self.tab_widget = QTabWidget()
        layout = QVBoxLayout()
        layout.addWidget(self.tab_widget)
        main_widget.setLayout(layout)

        self.create_welcome_tab()
        self.create_labs_tab()
        self.create_business_tab()

    def create_welcome_tab(self):
        tab = QWidget()
        tab_layout = QVBoxLayout(tab)

        tab_layout.addItem(QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding))

        content = QFrame()
        content_layout = QVBoxLayout(content)

        title = QLabel("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ –±–∏–∑–Ω–µ—Å-—Å–∏–º—É–ª—è—Ç–æ—Ä—ã")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 28px; font-weight: bold; color: #2c3e50;")
        content_layout.addWidget(title)

        desc = QLabel(
            "<div style='text-align: center; margin: 30px 0;'>"
            "<p style='font-size: 16px; line-height: 1.5;'>"
            "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è<br>"
            "–∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ä–µ–¥–µ"
            "</p>"
            "<p style='font-size: 14px; color: #7f8c8d; margin-top: 20px;'>"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫–∏ –≤—ã—à–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É"
            "</p></div>"
        )
        desc.setAlignment(Qt.AlignCenter)
        content_layout.addWidget(desc)

        tab_layout.addWidget(content)
        tab_layout.addItem(QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding))

        self.tab_widget.addTab(tab, "–ì–ª–∞–≤–Ω–∞—è")

    def create_labs_tab(self):
        tab = QWidget()
        layout = QVBoxLayout(tab)

        subject_layout = QHBoxLayout()
        subject_label = QLabel("–ü—Ä–µ–¥–º–µ—Ç:")
        self.subject_combo = QComboBox()
        self.subject_combo.addItems(["–•–∏–º–∏—è", "–§–∏–∑–∏–∫–∞", "–ë–∏–æ–ª–æ–≥–∏—è", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"])
        self.subject_combo.currentTextChanged.connect(self.load_questions)
        subject_layout.addWidget(subject_label)
        subject_layout.addWidget(self.subject_combo)
        layout.addLayout(subject_layout)

        self.questions_container = QVBoxLayout()
        layout.addLayout(self.questions_container)

        btn_layout = QHBoxLayout()
        self.check_btn = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã")
        self.check_btn.clicked.connect(self.check_answers)
        self.reset_btn = QPushButton("–°–±—Ä–æ—Å–∏—Ç—å")
        self.reset_btn.clicked.connect(self.reset_answers)
        btn_layout.addWidget(self.check_btn)
        btn_layout.addWidget(self.reset_btn)
        layout.addLayout(btn_layout)

        self.tab_widget.addTab(tab, "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã")
        self.load_questions()

    def load_questions(self):
        while self.questions_container.count():
            item = self.questions_container.takeAt(0)
            if item.widget():
                item.widget().deleteLater()

        subject = self.subject_combo.currentText()
        group = QGroupBox(f"–í–æ–ø—Ä–æ—Å—ã –ø–æ {subject}")
        layout = QVBoxLayout()

        self.answer_fields = []
        for q in self.questions[subject]:
            question_label = QLabel(q["question"])
            question_label.setWordWrap(True)
            answer_field = QLineEdit()
            answer_field.setProperty("answer_type", q["answer_type"])
            if q["answer_type"] == "numeric":
                answer_field.setProperty("correct", q["answer_correct"])
                answer_field.setProperty("tolerance", q["tolerance"])
            else:
                answer_field.setProperty("keywords", q["correct_keywords"])
            layout.addWidget(question_label)
            layout.addWidget(answer_field)
            self.answer_fields.append(answer_field)

        group.setLayout(layout)
        self.questions_container.addWidget(group)

    def check_answers(self):
        correct = 0
        total = len(self.answer_fields)

        for field in self.answer_fields:
            answer = field.text().strip().lower()
            answer_type = field.property("answer_type")

            if answer_type == "numeric":
                try:
                    user_val = float(answer)
                    correct_val = field.property("correct")
                    tolerance = field.property("tolerance")
                    if abs(user_val - correct_val) <= tolerance:
                        correct += 1
                except:
                    pass
            else:
                keywords = field.property("keywords")
                if any(kw in answer for kw in keywords):
                    correct += 1

        QMessageBox.information(
            self, "–†–µ–∑—É–ª—å—Ç–∞—Ç",
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} –∏–∑ {total}",
            QMessageBox.Ok
        )

    def reset_answers(self):
        for field in self.answer_fields:
            field.clear()

    def create_business_tab(self):
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_widget = QWidget()
        stats_layout = QHBoxLayout(self.stats_widget)
        self.stats_labels = {
            'budget': QLabel("–ë—é–¥–∂–µ—Ç: 1 000 000 ‚ÇΩ"),
            'reputation': QLabel("–†–µ–ø—É—Ç–∞—Ü–∏—è: 75%"),
            'team': QLabel("–ö–æ–º–∞–Ω–¥–∞: 10 —á–µ–ª."),
            'users': QLabel("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 0")
        }
        for label in self.stats_labels.values():
            label.setStyleSheet("font-weight: bold; color: #2c3e50;")
            stats_layout.addWidget(label)
        layout.addWidget(self.stats_widget)

        # –°—Ü–µ–Ω–∞—Ä–∏–π
        self.scenario_text = QTextEdit()
        self.scenario_text.setReadOnly(True)
        layout.addWidget(self.scenario_text)

        # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        self.decision_input = QLineEdit()
        self.decision_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
        layout.addWidget(self.decision_input)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        self.result_label = QLabel()
        self.result_label.setWordWrap(True)
        layout.addWidget(self.result_label)

        # –ö–Ω–æ–ø–∫–∏
        btn_layout = QHBoxLayout()
        self.decision_btn = QPushButton("–ü—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ")
        self.decision_btn.clicked.connect(self.process_decision)
        self.restart_btn = QPushButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞")
        self.restart_btn.clicked.connect(self.restart_business)
        btn_layout.addWidget(self.decision_btn)
        btn_layout.addWidget(self.restart_btn)
        layout.addLayout(btn_layout)

        self.tab_widget.addTab(tab, "–ë–∏–∑–Ω–µ—Å-—Å–∏–º—É–ª—è—Ç–æ—Ä")
        self.update_business_ui()

    def update_business_ui(self):
        scenario = self.business_sim.current_scenario
        stage = scenario['stages'][self.business_sim.current_stage]

        text = f"""
            <div style='font-family: Arial; color: #2c3e50;'>
                <h2 style='color: #3498db;'>{scenario['name']}</h2>
                <p style='font-weight: bold; font-size: 16px;'>
                    {stage['description']}
                </p>
                <ul style='list-style: none; padding-left: 0;'>
        """

        for option in stage['options']:
            text += f"""
                <li style='margin: 12px 0; padding: 10px; 
                    background: #f8f9fa; border-radius: 4px;'>
                    ‚û°Ô∏è {option}
                </li>
            """

        text += "</ul></div>"

        self.scenario_text.setHtml(text)
        self.update_stats()

    def update_stats(self):
        stats = self.business_sim.stats
        self.stats_labels['budget'].setText(f"–ë—é–¥–∂–µ—Ç: {stats['budget']:,} ‚ÇΩ".replace(",", " "))
        self.stats_labels['reputation'].setText(f"–†–µ–ø—É—Ç–∞—Ü–∏—è: {stats['reputation']}%")
        self.stats_labels['team'].setText(f"–ö–æ–º–∞–Ω–¥–∞: {stats['team']} —á–µ–ª.")
        self.stats_labels['users'].setText(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['users']:,}".replace(",", " "))

    def process_decision(self):
        decision = self.decision_input.text().strip()
        scenario = self.business_sim.current_scenario
        stage = scenario['stages'][self.business_sim.current_stage]

        if not decision.isdigit() or int(decision) < 1 or int(decision) > len(stage['options']):
            self.result_label.setText("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞")
            self.result_label.setStyleSheet("color: #c0392b;")
            return

        choice_index = int(decision) - 1
        result = stage['results'][choice_index]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for key, value in result.items():
            self.business_sim.stats[key] += value
            self.business_sim.stats[key] = max(0, self.business_sim.stats[key])

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        self.business_sim.current_stage += 1

        if self.business_sim.current_stage >= len(scenario['stages']):
            self.show_final_results()
        else:
            self.update_business_ui()
            self.decision_input.clear()
            self.result_label.setText("‚úì –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É")
            self.result_label.setStyleSheet("color: #27ae60;")

    def show_final_results(self):
        result_text = f"""
            <div style='font-family: Arial; color: #2c3e50;'>
                <h3 style='color: #3498db;'>–ò—Ç–æ–≥–∏ –∏–≥—Ä—ã: {self.business_sim.current_scenario['name']}</h3>
                <p>üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç: {self.business_sim.stats['budget']:,} ‚ÇΩ</p>
                <p>üèÜ –†–µ–ø—É—Ç–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {self.business_sim.stats['reputation']}%</p>
                <p>üë• –ö–æ–º–∞–Ω–¥–∞: {self.business_sim.stats['team']} —á–µ–ª.</p>
                <p>üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {self.business_sim.stats['users']:,}</p>
        """

        if self.business_sim.stats['budget'] > 2000000:
            result_text += """
                <p style='color: #27ae60; font-weight: bold;'>
                    üéâ –ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π —É—Å–ø–µ—Ö! –ö–æ–º–ø–∞–Ω–∏—è —Å—Ç–∞–ª–∞ –ª–∏–¥–µ—Ä–æ–º —Ä—ã–Ω–∫–∞!
                </p>
            """
        elif self.business_sim.stats['budget'] > 1000000:
            result_text += """
                <p style='color: #2ecc71;'>
                    üëç –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ö–æ–º–ø–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è.
                </p>
            """
        else:
            result_text += """
                <p style='color: #c0392b; font-weight: bold;'>
                    ‚ö†Ô∏è –ö—Ä–∏–∑–∏—Å! –ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Å—Ä–æ—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
                </p>
            """

        result_text += "</div>"

        self.scenario_text.setHtml(result_text)
        self.decision_input.setEnabled(False)
        self.decision_btn.setEnabled(False)

    def restart_business(self):
        self.business_sim.reset()
        self.decision_input.setEnabled(True)
        self.decision_btn.setEnabled(True)
        self.decision_input.clear()
        self.result_label.clear()
        self.update_business_ui()

    def closeEvent(self, event):
        reply = QMessageBox.question(
            self, "–í—ã—Ö–æ–¥",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É?",
            QMessageBox.Yes | QMessageBox.No
        )
        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()


def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
